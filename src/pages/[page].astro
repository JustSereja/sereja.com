---
import PageLayout from '@layouts/Page.astro';
import siteConfig from '@config/site';
import {
  findTopLevelPage,
  getPageLanguage,
  getPagePermalink,
  getPageTranslations,
  getTopLevelPageDescriptors,
} from '@lib/content';
import { DEFAULT_LOCALE } from '@lib/language';

export async function getStaticPaths() {
  const descriptors = await getTopLevelPageDescriptors();

  return descriptors
    .filter((descriptor) => descriptor.lang === DEFAULT_LOCALE)
    .map((descriptor) => ({
      params: { page: descriptor.slug },
      props: { translationKey: descriptor.translationKey },
    }));
}

const { page } = Astro.params;
const { translationKey } = Astro.props as { translationKey: string };

const entry = await findTopLevelPage({
  translationKey,
  lang: DEFAULT_LOCALE,
  slug: page,
});

if (!entry) {
  return Astro.redirect('/404');
}

const translations = await getPageTranslations(entry);
const alternates = translations
  .filter((candidate) => candidate.id !== entry.id)
  .map((candidate) => ({
    lang: getPageLanguage(candidate),
    url: new URL(getPagePermalink(candidate), siteConfig.siteUrl).toString(),
  }));

const { Content } = await entry.render();
---
<PageLayout entry={entry} Content={Content} alternates={alternates} />
