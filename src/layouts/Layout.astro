---
import siteConfig from '@config/site';
import { getEnabledCategoryIds } from '@lib/content';
import { DEFAULT_LOCALE, isDefaultLocale } from '@lib/language';
import { ensureTrailingSlash } from '@utils/url';
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';
import PageHead from '@components/layout/PageHead.astro';
import SiteHeader from '@components/layout/SiteHeader.astro';
import MobileMenu from '@components/layout/MobileMenu.astro';

type AlternateLink = {
  lang: string;
  url: string;
};

type LayoutProps = {
  title?: string;
  description?: string;
  keywords?: string;
  image?: string;
  prevPageUrl?: string;
  nextPageUrl?: string;
  alternates?: AlternateLink[];
};

const {
  title,
  description,
  keywords,
  image,
  prevPageUrl,
  nextPageUrl,
  alternates = [],
}: LayoutProps = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const pathname = ensureTrailingSlash(Astro.url.pathname);
const baseDomain = siteConfig.siteUrl;
const canonicalUrl = new URL(pathname, baseDomain).toString();

const categories = getEnabledCategoryIds();

const escapeRegExp = (value: string) => value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

const parsedAlternates = alternates.map(({ lang, url }) => {
  try {
    return { lang, pathname: new URL(url, baseDomain).pathname };
  } catch {
    return { lang, pathname: url };
  }
});

const alternateMap = new Map(parsedAlternates.map((item) => [item.lang, ensureTrailingSlash(item.pathname)]));

function getLocalePath(targetLang: string): string {
  const mapped = alternateMap.get(targetLang);
  if (mapped) {
    return mapped;
  }

  const normalizedPath = pathname === '/' ? '' : pathname.replace(/^\//, '');
  const isCurrentDefault = isDefaultLocale(lang);
  const contentSlug = isCurrentDefault
    ? normalizedPath
    : normalizedPath.replace(new RegExp(`^${escapeRegExp(lang)}/`), '');

  if (targetLang === DEFAULT_LOCALE) {
    const defaultPath = contentSlug ? `/${contentSlug}` : '/';
    return ensureTrailingSlash(defaultPath);
  }

  const candidatePath = contentSlug
    ? ensureTrailingSlash(`/${targetLang}/${contentSlug}`)
    : ensureTrailingSlash(`/${targetLang}/`);

  if (pathname === candidatePath) {
    return candidatePath;
  }

  return ensureTrailingSlash(`/${targetLang}/`);
}

const normalizeLanguageCode = (value: string) => value.toLowerCase();
const toDisplayCode = (value: string) => normalizeLanguageCode(value).split('-')[0];
const languageFlagMap: Record<string, string> = {
  en: 'ðŸ‡¬ðŸ‡§',
  ru: 'ðŸ‡·ðŸ‡º',
};
const getLanguageFlag = (value: string) => {
  const normalized = toDisplayCode(value);
  return languageFlagMap[normalized] ?? normalized.toUpperCase();
};

const languageOptions = siteConfig.languages.map((code) => {
  const displayCode = toDisplayCode(code);
  const normalizedCode = normalizeLanguageCode(code);
  const activeLang = normalizeLanguageCode(lang);
  const isActive = normalizedCode === activeLang || displayCode === activeLang;
  const isAvailable =
    isActive ||
    alternateMap.has(code) ||
    alternateMap.has(displayCode) ||
    alternateMap.has(normalizedCode);

  const fallbackHref =
    code === DEFAULT_LOCALE ? '/' : ensureTrailingSlash(`/${code}/`);
  const href = isAvailable ? getLocalePath(code) : fallbackHref;

  return {
    code,
    label: code.toUpperCase(),
    displayLabel: getLanguageFlag(code),
    href,
    isActive,
    isAvailable,
  };
});

function isPostListPage(): boolean {
  const pathname = Astro.url.pathname;
  const paginatedHome = new RegExp(`^/(?:${siteConfig.languages.join('|')}/)?(\\d+/?)?$`);
  if (pathname === '/' || paginatedHome.test(pathname)) {
    return true;
  }

  if (!categories.length) {
    return false;
  }

  const categoryRegex = new RegExp(
    `^/(?:${siteConfig.languages.join('|')}/)?(${categories.join('|')})(/\\d+/?)?$`
  );
  return categoryRegex.test(pathname);
}

const showSearch = isPostListPage();

const siteTitleLocalized =
  siteConfig.title[lang] ?? siteConfig.title[DEFAULT_LOCALE];

const metaTitle = title ?? siteTitleLocalized;
const metaDescription =
  description ??
  siteConfig.description[lang] ??
  siteConfig.description[DEFAULT_LOCALE];
const ogImage = image && image.startsWith('http')
  ? image
  : `${baseDomain}${image ?? siteConfig.seo.defaultImage}`;

const twitterHandle = siteConfig.seo.twitterHandle
  ? `@${siteConfig.seo.twitterHandle.replace(/^@/, '')}`
  : undefined;

const toAbsolute = (url?: string) =>
  url ? new URL(ensureTrailingSlash(url), baseDomain).toString() : undefined;

const prevAbsolute = toAbsolute(prevPageUrl);
const nextAbsolute = toAbsolute(nextPageUrl);
const fallbackDescription = t('ui.description');
const homeHref = ensureTrailingSlash(`/${isDefaultLocale(lang) ? '' : lang}`);
const navItems = [
  {
    id: 'about',
    href: translatePath('/about'),
    label: t('ui.about'),
  },
];
---
<!DOCTYPE html>
<html lang={lang}>
  <PageHead
    lang={lang}
    title={metaTitle}
    description={metaDescription}
    keywords={keywords}
    canonicalUrl={canonicalUrl}
    alternates={parsedAlternates}
    prev={prevAbsolute}
    next={nextAbsolute}
    ogImage={ogImage}
    twitterHandle={twitterHandle}
    baseDomain={baseDomain}
    fallbackDescription={fallbackDescription}
  />
  <body>
    <div class="page">
      <SiteHeader
        lang={lang}
        siteTitle={siteTitleLocalized}
        homeHref={homeHref}
        navItems={navItems}
        languageOptions={languageOptions}
        showSearch={showSearch}
        enableDarkMode={siteConfig.features.darkMode}
      />

      <MobileMenu lang={lang} navItems={navItems} languageOptions={languageOptions} />

      <main class="main">
        <div class="cont">
          <slot />
        </div>
      </main>
    </div>
  </body>
</html>
